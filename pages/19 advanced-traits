# Advanced traits

## Associated types

_Associated types_ connect a type placeholder with a trait such that the trait method definitions can use these placeholder types in their signatures.

The implementor of the trait will specify the concrete type to be used in the type's place for a particular implementation.

This way, we can define traits that uses some types without needing to know exactly what those types are until implemented.

```rs
pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;
}

impl Iterator for Counter {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        // --snip--
    }
}
```

The difference between associated types and generics is that when a trait has a generic, it can be **implemented for a type multiple times**, changing the concrete types of the generic type parameter each time. In that situation, when we use the methods defined by the trait, we would have to provide type annotations to indicate which implementation we want to use.

```rs
impl Iterator<String> for Counter {
    // --snip--
}

impl Iterator<u32> for Counter {
    // --snip--
}

let x = counter.next(); // missing type annotation.
```

## Default generic type parameters and operator overloading

When using generic type parameters, we can specify a default concrete type for the generic using `<PlaceholderType=ConcreteType>` during declaration. This technique is useful for _operator overloading_.

Operator overloading is customizing the behavior of operators (such as `+`) in particular situations.

Rust doesn't let us create our own operators or overload arbitrary operators, but we can overload the operations and their corresponding traits in `std::ops`.

```rs
use std::ops::Add;

#[derive(Debug, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Point;
    fn add(self, other: Point) -> Point {
        Point {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}
```

`Add` comes with a default generic type parameter `<RHS=Self>`. If we want to customize the values that can be added together, we can specify `RHS`.

```rs
impl Add<Meters> for Millimeters {
    type Output = Millimeters;

    // --snip--
}
```

## Fully qualified syntax for disambiguation

Nothing in Rust prevents a trait from having a method with the same name as another trait's method. It is also possible to implement a method directly on a type with the same name as a method from a trait.

When multiple methods exist with the same name, we need to use more explicit syntax to tell Rust which method we want to use.

```rs
trait Pilot {
    fn fly(&self);
}

trait Wizard {
    fn fly(&self);
}

struct Human;

impl Pilot for Human {
    fn fly(&self) {
        // --snip--
    }
}

impl Wizard for Human {
    fn fly(&self) {
        // --snip--
    }
}

impl Human {
    fn fly(&self) {
        // --snip--
    }
}

let person = Human;
Pilot::fly(&person);  // calls Pilot impl
Wizard::fly(&person); // calls Wizard impl
person.fly();         // calls Human impl
```

However, this only works because the methods take a `self` parameter. Rust is able to use the type of `self` as `Human` to figure out that we want the implementations `Pilot for Human` and `Wizard for` If we only have an associated function without `self`, we will have to use the _fully qualified syntax_.

```rs
trait Animal {
    fn baby_name();
}

struct Dog;

impl Dog {
    fn baby_name() {
        // --snip--
    }
}

impl Animal for Dog {
    fn baby_name() {
        // --snip--
    }
}

Dog::baby_name();             // calls Dog impl
Animal::baby_name();          // errors because Rust doesn't know which type to use.
<Dog as Animal>::baby_name(); // calls Animal for Dog impl
```

## Supertraits to require one trait's functionality within another trait

Sometimes, we might need one trait to use another traitâ€™s functionality. In this case, we need to rely on the dependent trait also being implemented. That trait we rely on is a _supertrait_ of the trait we are implementing.

```rs
use std::fmt;

trait OutlinePrint: fmt::Display {
    fn outline_print(&self) {
        let output = self.to_string(); // from the Display trait.
        // --snip--
    }
}
```

In this case, because we've specified that `OutlinePrint` requires the `Display` trait, we can use `self.to_string`.

If we try to implement `OutlinePrint` on a type that does not implement `Display`, we will then get an error at compile time.

## Newtype pattern to implement external traits on external types

One of the rules of traits is that we cannot implement external traits on external types to preserve _coherence_. It is possible to get around this restriction by using the _newtype pattern_, which involves creating a new type in a tuple struct.

The tuple struct will have one field and be a thin wrapper around the type we want to implement a trait for. As such, the wrapper type will be local to our crate, and we can implement the trait on the wrapper.

There is no runtime performance penalty for using this pattern and the wrapper type is elided at compile time.

```rs
use std::fmt;

struct Wrapper(Vec<String>);

impl fmt::Display for Wrapper {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "[{}]", self.0.join(", "))
    }
}

fn main() {
    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
    println!("w = {}", w);
}
```

One downside is that the wrapper does not have all the methods defined on the inner type. If we want `Wrapper` to have all methods of the inner type, short of manually implementing all methods to defer to `self.0`, one solution would be to implement the `Deref` trait on the `Wrapper` to return the inner type.
